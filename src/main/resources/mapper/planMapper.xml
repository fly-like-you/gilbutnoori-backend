<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.gilbut.domain.plan.mapper.PlanMapper">
    <!-- Plan ResultMap 정의 -->
    <resultMap id="PlanResultMap" type="PlanResponseDTO">
        <id property="id" column="plan_id"/>
        <result property="travelId" column="travel_id"/>
        <result property="order" column="plan_order"/>

        <!-- Attraction 관련 매핑 -->
        <association property="attraction" javaType="AttractionDTO">
            <id property="id" column="attraction_id"/>
            <result property="title" column="attraction_name"/>
            <!-- AttractionDTO의 다른 필드들 추가 -->
        </association>

        <!-- Course 관련 매핑 -->
        <association property="course" javaType="CourseSimpleResponseDTO">
            <result property="name" column="course_name"/>
            <result property="dist" column="course_dist"/>
            <result property="turnaround" column="course_turnaround"/>
            <result property="level" column="course_level"/>
        </association>

    </resultMap>

    <insert id="insertPlans" parameterType="PlanCreateRequestDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO plans (
            attraction_id,
            travel_id,
            course_id,
            `order`
        ) VALUES
              <foreach collection="dto" item="plan" separator=",">
              (
                     #{plan.attractionId},
                     #{plan.travelId},
                     #{plan.courseId},
                     #{plan.order}
                 )
              </foreach>
    </insert>

    <!-- 계획 ID로 단일 계획 조회 -->
    <select id="findPlanById" resultMap="PlanResultMap">
        SELECT
            p.id as plan_id,
            p.travel_id,
            p.order,
            a.id as attraction_id,
            a.title as attraction_name,
            /* attraction의 다른 필드들 */
            c.name as course_name,
            c.dist as course_dist,
            c.turnaround as course_turnaround,
            c.level as course_level
        FROM
            plans p
                LEFT JOIN attractions a ON p.attraction_id = a.id
                LEFT JOIN courses c ON p.course_id = c.id
        WHERE
            p.id = #{planId}
    </select>

    <!-- 사용자 ID로 계획 목록 조회 -->
    <select id="findPlansByUserId" resultMap="PlanResultMap">
        SELECT
            p.id as plan_id,
            p.travel_id,
            p.order,
            a.id as attraction_id,
            a.title as attraction_name,
            /* attraction의 다른 필드들 */
            c.name as course_name,
            c.dist as course_dist,
            c.turnaround as course_turnaround,
            c.level as course_level
        FROM
            plans p
                LEFT JOIN attractions a ON p.attraction_id = a.id
                LEFT JOIN courses c ON p.course_id = c.id
                INNER JOIN travels t ON p.travel_id = t.id
        WHERE
            t.user_id = #{userId}
        ORDER BY
            p.travel_id, p.order
    </select>

    <select id="countPlansByUserId" resultType="int">
        SELECT COUNT(*)
        FROM plans p
                 JOIN travels t ON p.travel_id = t.id
        WHERE t.user_id = #{userId}
    </select>

    <update id="updatePlan">
        UPDATE plans
        SET
            attraction_id = #{dto.attractionId},
            course_id = #{dto.courseId},
            `order` = #{dto.order}
        WHERE id = #{planId}
    </update>

    <delete id="deletePlan">
        DELETE FROM plans
        WHERE id = #{planId}
    </delete>

</mapper>
